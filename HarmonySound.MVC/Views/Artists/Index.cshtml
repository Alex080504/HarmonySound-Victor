@model IEnumerable<HarmonySound.Models.Content>

@{
    ViewData["Title"] = "Mis Canciones";
}

<div class="music-library-container">
    <div class="library-header">
        <h1 class="library-title">
            <i class="fas fa-music me-3"></i>
            Mis Canciones
        </h1>
        <p class="library-subtitle">Gestiona y reproduce tu contenido musical</p>
        
        <div class="header-actions">
            <a asp-action="Upload" class="btn-create">
                <i class="fas fa-plus me-2"></i>
                Subir Nueva Canción
            </a>
        </div>
    </div>

    <div class="songs-container">
        <div class="songs-header">
            <h2>Canciones</h2>
        </div>
        
        @if (Model != null && Model.Any())
        {
            <div class="songs-list">
                @foreach (var content in Model)
                {
                    <div class="song-item" data-content-id="@content.Id">
                        <div class="song-main-info">
                            <div class="song-cover">
                                <div class="cover-placeholder">
                                    <i class="fas fa-music"></i>
                                </div>
                            </div>
                            
                            <div class="song-details">
                                <div class="song-title">@content.Title</div>
                                <div class="song-meta">
                                    <span class="content-type">@content.Type</span>
                                    <span class="artist-name">Mi contenido</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="song-actions">
                            <!-- Solo botón de reproducir, sin likes ni playlist -->
                            <button class="btn btn-play play-in-player-btn" 
                                    data-content-id="@content.Id"
                                    data-title="@content.Title"
                                    data-artist="Mi contenido"
                                    data-url="@content.UrlMedia"
                                    title="Reproducir">
                                <i class="fas fa-play"></i>
                            </button>
                        </div>
                        
                        <div class="song-duration">
                            <i class="fas fa-clock me-1"></i>
                            <span>@(content.Duration.TotalSeconds > 0 ? content.Duration.ToString(@"mm\:ss") : "--:--")</span>
                        </div>
                        
                        <div class="song-menu">
                            <button class="btn-menu" title="Más opciones">
                                <i class="fas fa-ellipsis-h"></i>
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <div class="empty-icon">
                    <i class="fas fa-music"></i>
                </div>
                <h3>No tienes canciones aún</h3>
                <p>Sube tu primera canción para comenzar</p>
                <a asp-action="Upload" class="btn-create">
                    <i class="fas fa-plus me-2"></i>
                    Subir Mi Primera Canción
                </a>
            </div>
        }
    </div>
</div>

<!-- Reproductor estilo Spotify - SIN LIKES -->
<div id="custom-player" class="custom-player d-none">
    <div class="player-container">
        <!-- Información de la canción -->
        <div class="now-playing">
            <div class="track-cover">
                <div class="cover-placeholder">
                    <i class="fas fa-music"></i>
                </div>
            </div>
            <div class="track-info">
                <div id="track-title" class="track-title">Selecciona una canción</div>
                <div id="track-artist" class="track-artist">Artista</div>
            </div>
            <!-- ❌ ELIMINADO: Botón de like -->
        </div>

        <!-- Controles centrales -->
        <div class="player-controls">
            <div class="control-buttons">
                <button class="control-btn" id="shuffle-btn" title="Aleatorio">
                    <i class="fas fa-random"></i>
                </button>
                <button class="control-btn" id="prev-btn" title="Anterior">
                    <i class="fas fa-step-backward"></i>
                </button>
                <button class="control-btn play-btn" id="play-pause-btn" title="Reproducir/Pausar">
                    <i class="fas fa-play"></i>
                </button>
                <button class="control-btn" id="next-btn" title="Siguiente">
                    <i class="fas fa-step-forward"></i>
                </button>
                <button class="control-btn" id="repeat-btn" title="Repetir">
                    <i class="fas fa-redo"></i>
                </button>
            </div>
            
            <!-- Barra de progreso -->
            <div class="progress-section">
                <span id="current-time" class="time">0:00</span>
                <div class="custom-progress-bar" id="custom-progress-bar">
                    <div class="progress-background"></div>
                    <div class="progress-fill" id="progress-fill"></div>
                    <div class="progress-handle" id="progress-handle"></div>
                </div>
                <span id="total-time" class="time">0:00</span>
            </div>
        </div>

        <!-- Controles adicionales -->
        <div class="extra-controls">
            <button class="control-btn" id="queue-btn" title="Cola">
                <i class="fas fa-list"></i>
            </button>
            <div class="volume-control">
                <button class="control-btn" id="volume-btn" title="Volumen">
                    <i class="fas fa-volume-up"></i>
                </button>
                <div class="custom-volume-slider" id="custom-volume-slider">
                    <div class="volume-background"></div>
                    <div class="volume-fill" id="volume-fill"></div>
                    <div class="volume-handle" id="volume-handle"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Audio oculto -->
    <audio id="hidden-audio" style="display: none;" preload="metadata">
        <source id="audio-source" src="" type="audio/mpeg">
    </audio>
</div>

<style>
    /* CSS Base y Responsive */
    .container { max-width: none !important; padding: 0 !important; }
    body { 
        background: #000 !important; 
        color: #fff !important; 
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important; 
        margin: 0; padding: 0; padding-bottom: 90px; 
    }

    /* Biblioteca Musical */
    .music-library-container { max-width: 1200px; margin: 0 auto; padding: 2rem; }
    .library-header { margin-bottom: 2rem; }
    .library-title { font-size: 2rem; font-weight: 700; margin-bottom: 0.5rem; color: #fff !important; }
    .library-subtitle { color: #b3b3b3 !important; font-size: 1rem; }
    
    .header-actions { margin-top: 1rem; }
    .btn-create {
        background: linear-gradient(135deg, #1db954, #1ed760);
        color: #000 !important; border: none; padding: 12px 24px; border-radius: 25px;
        font-weight: 600; text-decoration: none; display: inline-flex; align-items: center;
        transition: all 0.3s ease; box-shadow: 0 4px 15px rgba(29, 185, 84, 0.3);
    }
    .btn-create:hover {
        transform: translateY(-2px); box-shadow: 0 6px 20px rgba(29, 185, 84, 0.4);
        color: #000 !important;
    }

    .songs-container { background: #121212 !important; border-radius: 8px; padding: 1.5rem; }
    .songs-header h2 { font-size: 1.5rem; font-weight: 700; margin-bottom: 1rem; color: #fff !important; }
    .songs-list { display: flex; flex-direction: column; gap: 4px; }

    /* Items de Canciones - GRID MODIFICADO SIN BOTÓN DE LIKE */
    .song-item {
        display: grid; grid-template-columns: 1fr 60px 80px 40px;
        grid-template-areas: "info actions duration menu"; align-items: center;
        padding: 8px 16px; border-radius: 4px; transition: background-color 0.3s ease;
        cursor: pointer; position: relative; min-height: 56px; border: 1px solid transparent;
    }
    .song-item:hover { background: #1a1a1a !important; border-color: #333 !important; }
    .song-item.playing { background: #1a1a1a !important; border-color: #1db954 !important; }
    .song-item.playing .song-title { color: #1db954 !important; }

    .song-main-info { grid-area: info; display: flex; align-items: center; gap: 12px; min-width: 0; }
    .song-cover { width: 40px; height: 40px; flex-shrink: 0; }
    .cover-placeholder { 
        width: 100%; height: 100%; background: #282828; border-radius: 4px; 
        display: flex; align-items: center; justify-content: center; color: #b3b3b3; 
    }
    .song-details { min-width: 0; flex-grow: 1; }
    .song-title { 
        font-size: 16px; font-weight: 400; color: #fff !important; margin-bottom: 4px; 
        white-space: nowrap; overflow: hidden; text-overflow: ellipsis; 
    }
    .song-meta { display: flex; align-items: center; gap: 8px; font-size: 14px; color: #b3b3b3; }
    .content-type { 
        background: #1db954 !important; color: #000 !important; padding: 2px 8px; 
        border-radius: 4px; font-size: 12px; font-weight: 500; 
    }
    .artist-name { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; color: #b3b3b3 !important; }

    /* ✅ ACCIONES SIMPLIFICADAS - SOLO REPRODUCIR */
    .song-actions { 
        grid-area: actions; display: flex; gap: 4px; justify-content: center; 
        opacity: 1 !important; visibility: visible !important; 
    }
    .song-actions .btn {
        background: none !important; border: none !important; color: #b3b3b3 !important;
        padding: 6px !important; border-radius: 50% !important; cursor: pointer !important;
        transition: all 0.3s ease; width: 40px !important; height: 40px !important;
        display: flex !important; align-items: center !important; justify-content: center !important;
        font-size: 16px !important;
    }
    .song-actions .btn:hover { background: #1a1a1a !important; color: #fff !important; transform: scale(1.1); }
    .btn-play:hover { color: #1db954 !important; }

    .song-duration { 
        grid-area: duration; font-size: 14px; color: #b3b3b3 !important; 
        font-variant-numeric: tabular-nums; text-align: right; 
    }
    .song-menu { grid-area: menu; opacity: 1 !important; visibility: visible !important; }
    .btn-menu {
        background: none !important; border: none !important; color: #b3b3b3 !important;
        padding: 6px !important; cursor: pointer !important; border-radius: 50% !important;
        width: 28px !important; height: 28px !important; display: flex !important;
        align-items: center !important; justify-content: center !important; font-size: 12px !important;
    }
    .btn-menu:hover { background: #1a1a1a !important; color: #fff !important; }

    /* Estado vacío */
    .empty-state {
        display: flex; flex-direction: column; align-items: center; justify-content: center;
        padding: 4rem 2rem; text-align: center; background: #121212; border-radius: 8px;
    }
    .empty-icon { font-size: 5rem; color: #404040; margin-bottom: 2rem; }
    .empty-state h3 { font-size: 1.8rem; font-weight: 600; margin-bottom: 1rem; color: #fff; }
    .empty-state p { color: #b3b3b3; font-size: 1.1rem; margin-bottom: 2rem; max-width: 400px; }

    /* ===== REPRODUCTOR PERSONALIZADO ===== */
    .custom-player {
        position: fixed; bottom: 0; left: 0; right: 0;
        background: linear-gradient(135deg, #181818, #1a1a1a);
        border-top: 1px solid #282828; height: 90px; z-index: 1000;
        box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.5);
    }
    .custom-player.d-none { display: none !important; }

    .player-container {
        display: grid; grid-template-columns: 1fr 2fr 1fr;
        align-items: center; height: 100%; padding: 0 16px; gap: 16px;
    }

    /* Información de la pista - SIN BOTÓN DE LIKE */
    .now-playing { display: flex; align-items: center; gap: 12px; min-width: 0; }
    .track-cover { width: 56px; height: 56px; flex-shrink: 0; }
    .track-info { min-width: 0; flex-grow: 1; }
    .track-title { 
        font-size: 14px; font-weight: 400; color: #fff; margin-bottom: 4px; 
        white-space: nowrap; overflow: hidden; text-overflow: ellipsis; 
    }
    .track-artist { 
        font-size: 12px; color: #b3b3b3; 
        white-space: nowrap; overflow: hidden; text-overflow: ellipsis; 
    }

    /* Controles centrales */
    .player-controls { display: flex; flex-direction: column; align-items: center; gap: 8px; }
    .control-buttons { display: flex; align-items: center; gap: 16px; }
    .control-btn {
        background: none; border: none; color: #b3b3b3; padding: 8px;
        cursor: pointer; border-radius: 50%; transition: all 0.3s ease;
        width: 32px; height: 32px; display: flex; align-items: center; justify-content: center;
    }
    .control-btn:hover { color: #fff; transform: scale(1.1); }
    .control-btn.active { color: #1db954; }
    .play-btn { 
        background: #fff !important; color: #000 !important; 
        width: 40px !important; height: 40px !important; font-size: 18px !important; 
    }
    .play-btn:hover { background: #f0f0f0 !important; transform: scale(1.05) !important; }

    /* Sección de progreso */
    .progress-section { 
        display: flex; align-items: center; gap: 12px; 
        width: 100%; max-width: 500px; 
    }
    .time { 
        font-size: 11px; color: #b3b3b3; font-variant-numeric: tabular-nums; 
        min-width: 40px; text-align: center; 
    }

    /* Barra de progreso personalizada */
    .custom-progress-bar {
        position: relative; width: 100%; height: 6px; cursor: pointer;
        border-radius: 3px; overflow: hidden;
    }
    .progress-background { 
        position: absolute; top: 0; left: 0; width: 100%; height: 100%; 
        background: #535353; border-radius: 3px; 
    }
    .progress-fill { 
        position: absolute; top: 0; left: 0; height: 100%; 
        background: linear-gradient(90deg, #1db954, #1ed760); 
        border-radius: 3px; width: 0%; transition: width 0.1s ease; 
    }
    .progress-handle { 
        position: absolute; top: 50%; transform: translate(-50%, -50%); 
        width: 14px; height: 14px; background: #fff; border-radius: 50%; 
        cursor: pointer; opacity: 0; transition: opacity 0.3s ease; 
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3); left: 0%; 
    }
    .custom-progress-bar:hover .progress-handle { opacity: 1; }
    .custom-progress-bar.dragging .progress-handle { opacity: 1; }

    /* Controles adicionales */
    .extra-controls { 
        display: flex; align-items: center; justify-content: flex-end; gap: 16px; 
    }

    .volume-control { display: flex; align-items: center; gap: 8px; }
    .custom-volume-slider {
        position: relative; width: 80px; height: 4px; cursor: pointer;
        border-radius: 2px; overflow: hidden; opacity: 1 !important; 
        transition: opacity 0.3s ease;
    }
    .volume-background { 
        position: absolute; top: 0; left: 0; width: 100%; height: 100%; 
        background: #535353; border-radius: 2px; 
    }
    .volume-fill { 
        position: absolute; top: 0; left: 0; height: 100%; 
        background: #1db954; border-radius: 2px; width: 50%; 
    }
    .volume-handle { 
        position: absolute; top: 50%; transform: translate(-50%, -50%); 
        width: 12px; height: 12px; background: #fff; border-radius: 50%; 
        cursor: pointer; left: 50%; 
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .player-container { grid-template-columns: 1fr 1fr; gap: 8px; }
        .extra-controls { display: none; }
        .song-item { grid-template-columns: 1fr 60px; grid-template-areas: "info actions"; }
        .song-duration, .song-menu { display: none; }
        .progress-section { max-width: 300px; }
    }

    @@media (max-width: 480px) {
        .custom-player { height: 80px; }
        .now-playing { gap: 8px; }
        .track-cover { width: 48px; height: 48px; }
        .control-btn { width: 28px; height: 28px; }
        .play-btn { width: 36px !important; height: 36px !important; }
    }

    /* Ocultar elementos del layout */
    header, footer { display: none !important; }
    .fas { font-family: "Font Awesome 5 Free" !important; font-weight: 900 !important; }

    /* Clases de utilidad */
    .noselect { user-select: none !important; }
    .dragging { cursor: grabbing !important; }
</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

<script>
// ===== REPRODUCTOR DE AUDIO PARA ARTISTAS CON REPRODUCCIÓN AUTOMÁTICA =====

class ArtistAudioPlayer {
    constructor() {
        this.audio = null;
        this.currentTrack = null;
        this.isPlaying = false;
        this.volume = 0.5;
        this.currentTime = 0;
        this.duration = 0;
        
        // Estados de interacción
        this.isProgressDragging = false;
        this.isVolumeDragging = false;
        
        // Referencias a elementos DOM
        this.playerElement = null;
        this.playPauseBtn = null;
        this.trackTitle = null;
        this.trackArtist = null;
        this.currentTimeElement = null;
        this.totalTimeElement = null;
        this.progressBar = null;
        this.progressFill = null;
        this.progressHandle = null;
        this.volumeControl = null;
        this.volumeFill = null;
        this.volumeHandle = null;
        
        this.init();
    }
    
    init() {
        console.log('Inicializando reproductor para artistas...');
        
        // Crear elemento de audio oculto
        this.audio = document.getElementById('hidden-audio');
        if (!this.audio) {
            this.audio = document.createElement('audio');
            this.audio.id = 'hidden-audio';
            this.audio.style.display = 'none';
            this.audio.preload = 'metadata';
            document.body.appendChild(this.audio);
        }
        
        // Obtener referencias a elementos
        this.getElementReferences();
        
        // Configurar event listeners
        this.setupEventListeners();
        
        // Configurar volumen inicial
        this.setVolume(this.volume);
        
        console.log('Reproductor para artistas inicializado');
    }
    
    getElementReferences() {
        this.playerElement = document.getElementById('custom-player');
        this.playPauseBtn = document.getElementById('play-pause-btn');
        this.trackTitle = document.getElementById('track-title');
        this.trackArtist = document.getElementById('track-artist');
        this.currentTimeElement = document.getElementById('current-time');
        this.totalTimeElement = document.getElementById('total-time');
        this.progressBar = document.getElementById('custom-progress-bar');
        this.progressFill = document.getElementById('progress-fill');
        this.progressHandle = document.getElementById('progress-handle');
        this.volumeControl = document.getElementById('custom-volume-slider');
        this.volumeFill = document.getElementById('volume-fill');
        this.volumeHandle = document.getElementById('volume-handle');
    }
    
    setupEventListeners() {
        // Eventos del audio
        if (this.audio) {
            this.audio.addEventListener('loadedmetadata', () => this.onLoadedMetadata());
            this.audio.addEventListener('timeupdate', () => this.onTimeUpdate());
            this.audio.addEventListener('ended', () => this.onTrackEnded());
            this.audio.addEventListener('error', (e) => this.onError(e));
            this.audio.addEventListener('canplay', () => console.log('Audio listo para reproducir'));
        }
        
        // Botón play/pause
        if (this.playPauseBtn) {
            this.playPauseBtn.addEventListener('click', () => this.togglePlayPause());
        }
        
        // Barra de progreso
        if (this.progressBar) {
            this.setupProgressBar();
        }
        
        // Control de volumen
        if (this.volumeControl) {
            this.setupVolumeControl();
        }
        
        // ✅ MODIFICADO: Botones de las canciones con reproducción automática
        document.querySelectorAll('.play-in-player-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.preventDefault();
                const track = this.extractTrackData(btn);
                // ✅ CAMBIO PRINCIPAL: Llamar a playTrackAndStart en lugar de playTrack
                this.playTrackAndStart(track);
            });
        });
    }
    
    setupProgressBar() {
        this.progressBar.addEventListener('mousedown', (e) => {
            this.isProgressDragging = true;
            this.progressBar.classList.add('dragging');
            document.body.classList.add('noselect');
            this.seekToPosition(e);
        });
        
        this.progressHandle.addEventListener('mousedown', (e) => {
            e.stopPropagation();
            this.isProgressDragging = true;
            this.progressBar.classList.add('dragging');
            document.body.classList.add('noselect');
        });
        
        document.addEventListener('mousemove', (e) => {
            if (this.isProgressDragging) {
                this.seekToPosition(e);
            }
        });
        
        document.addEventListener('mouseup', () => {
            if (this.isProgressDragging) {
                this.isProgressDragging = false;
                this.progressBar.classList.remove('dragging');
                document.body.classList.remove('noselect');
            }
        });
    }
    
    setupVolumeControl() {
        this.volumeControl.addEventListener('mousedown', (e) => {
            this.isVolumeDragging = true;
            this.setVolumeFromPosition(e);
        });
        
        this.volumeHandle.addEventListener('mousedown', (e) => {
            e.stopPropagation();
            this.isVolumeDragging = true;
        });
        
        document.addEventListener('mousemove', (e) => {
            if (this.isVolumeDragging) {
                this.setVolumeFromPosition(e);
            }
        });
        
        document.addEventListener('mouseup', () => {
            this.isVolumeDragging = false;
        });
    }
    
    extractTrackData(button) {
        return {
            id: button.getAttribute('data-content-id'),
            title: button.getAttribute('data-title'),
            artist: button.getAttribute('data-artist'),
            url: button.getAttribute('data-url')
        };
    }
    
    // ✅ NUEVO MÉTODO: Cargar canción solamente (sin reproducir)
    async playTrack(track) {
        if (!track || !track.url) {
            console.error('Track inválido');
            return;
        }
        
        console.log('Cargando canción:', track.title);
        
        this.currentTrack = track;
        
        // Actualizar información
        if (this.trackTitle) this.trackTitle.textContent = track.title || 'Canción desconocida';
        if (this.trackArtist) this.trackArtist.textContent = track.artist || 'Mi contenido';
        
        // Mostrar reproductor
        if (this.playerElement) {
            this.playerElement.classList.remove('d-none');
        }
        
        // Actualizar UI de canciones
        document.querySelectorAll('.song-item').forEach(item => {
            item.classList.remove('playing');
        });
        
        const songItem = document.querySelector(`[data-content-id="${track.id}"]`);
        if (songItem) {
            songItem.classList.add('playing');
        }
        
        // Configurar y cargar audio (sin reproducir)
        this.audio.src = track.url;
        await this.audio.load();
        
        console.log('Audio cargado. Listo para reproducir.');
    }

    // ✅ NUEVO MÉTODO: Cargar y reproducir automáticamente
    async playTrackAndStart(track) {
        if (!track || !track.url) {
            console.error('Track inválido');
            return;
        }
        
        console.log('Reproduciendo automáticamente:', track.title);
        
        this.currentTrack = track;
        
        // Actualizar información
        if (this.trackTitle) this.trackTitle.textContent = track.title || 'Canción desconocida';
        if (this.trackArtist) this.trackArtist.textContent = track.artist || 'Mi contenido';
        
        // Mostrar reproductor
        if (this.playerElement) {
            this.playerElement.classList.remove('d-none');
        }
        
        // Actualizar UI de canciones
        document.querySelectorAll('.song-item').forEach(item => {
            item.classList.remove('playing');
        });
        
        const songItem = document.querySelector(`[data-content-id="${track.id}"]`);
        if (songItem) {
            songItem.classList.add('playing');
        }
        
        try {
            // Configurar y cargar audio
            this.audio.src = track.url;
            await this.audio.load();
            
            // ✅ REPRODUCIR AUTOMÁTICAMENTE
            await this.audio.play();
            this.isPlaying = true;
            this.updatePlayPauseButton();
            
            console.log('Reproduciendo automáticamente:', track.title);
        } catch (error) {
            console.error('Error al reproducir automáticamente:', error);
            // Si falla la reproducción automática, solo cargar la canción
            console.log('Fallback: Canción cargada, esperando interacción del usuario');
        }
    }
    
    async togglePlayPause() {
        if (!this.audio || !this.currentTrack) return;
        
        try {
            if (this.audio.paused) {
                await this.audio.play();
                this.isPlaying = true;
            } else {
                this.audio.pause();
                this.isPlaying = false;
            }
            this.updatePlayPauseButton();
        } catch (error) {
            console.error('Error al cambiar estado de reproducción:', error);
        }
    }
    
    updatePlayPauseButton() {
        if (!this.playPauseBtn) return;
        
        const icon = this.playPauseBtn.querySelector('i');
        if (icon) {
            icon.className = this.isPlaying ? 'fas fa-pause' : 'fas fa-play';
        }
    }
    
    seekToPosition(e) {
        if (!this.audio || !this.audio.duration || !this.progressBar) return;
        
        const rect = this.progressBar.getBoundingClientRect();
        const x = Math.max(0, Math.min(e.clientX - rect.left, rect.width));
        const percent = x / rect.width;
        
        this.audio.currentTime = percent * this.audio.duration;
        this.updateProgressDisplay();
    }
    
    setVolumeFromPosition(e) {
        if (!this.volumeControl) return;
        
        const rect = this.volumeControl.getBoundingClientRect();
        const x = Math.max(0, Math.min(e.clientX - rect.left, rect.width));
        const volume = x / rect.width;
        
        this.setVolume(volume);
    }
    
    setVolume(volume) {
        this.volume = Math.max(0, Math.min(1, volume));
        
        if (this.audio) {
            this.audio.volume = this.volume;
        }
        
        if (this.volumeFill) {
            this.volumeFill.style.width = (this.volume * 100) + '%';
        }
        
        if (this.volumeHandle) {
            this.volumeHandle.style.left = (this.volume * 100) + '%';
        }
        
        const volumeBtn = document.getElementById('volume-btn');
        if (volumeBtn) {
            const icon = volumeBtn.querySelector('i');
            if (icon) {
                if (this.volume === 0) {
                    icon.className = 'fas fa-volume-mute';
                } else if (this.volume < 0.5) {
                    icon.className = 'fas fa-volume-down';
                } else {
                    icon.className = 'fas fa-volume-up';
                }
            }
        }
    }
    
    onLoadedMetadata() {
        this.duration = this.audio.duration;
        this.updateTimeDisplay();
    }
    
    onTimeUpdate() {
        if (!this.isProgressDragging) {
            this.currentTime = this.audio.currentTime;
            this.updateProgressDisplay();
            this.updateTimeDisplay();
        }
    }
    
    updateProgressDisplay() {
        if (!this.audio || !this.audio.duration) return;
        
        const percent = (this.audio.currentTime / this.audio.duration) * 100;
        
        if (this.progressFill) {
            this.progressFill.style.width = percent + '%';
        }
        
        if (this.progressHandle) {
            this.progressHandle.style.left = percent + '%';
        }
    }
    
    updateTimeDisplay() {
        if (this.currentTimeElement) {
            this.currentTimeElement.textContent = this.formatTime(this.audio.currentTime);
        }
        
        if (this.totalTimeElement) {
            this.totalTimeElement.textContent = this.formatTime(this.audio.duration);
        }
    }
    
    formatTime(seconds) {
        if (!seconds || isNaN(seconds)) return '0:00';
        
        const mins = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${mins}:${secs.toString().padStart(2, '0')}`;
    }
    
    onTrackEnded() {
        this.isPlaying = false;
        this.updatePlayPauseButton();
        console.log('Canción terminada');
    }
    
    onError(e) {
        console.error('Error en audio:', e);
    }
}

// Inicializar reproductor cuando se carga el DOM
document.addEventListener('DOMContentLoaded', () => {
    window.artistPlayer = new ArtistAudioPlayer();
});
</script>
